name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint
      
      - name: Check formatting
        run: npx prettier --check .

  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    
    services:
      sqlite:
        image: nouchka/sqlite3:latest
        options: >-
          --health-cmd "sqlite3 --version"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          cd backend
          npm ci
      
      - name: Run migrations
        run: |
          cd backend
          npm run migrate
      
      - name: Run backend tests
        run: |
          cd backend
          npm test
        env:
          NODE_ENV: test
          DATABASE_PATH: ':memory:'
      
      - name: Check backend build
        run: |
          cd backend
          npm run build --if-present

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Run frontend tests
        run: |
          cd frontend
          npm test --if-present
      
      - name: Build frontend
        run: |
          cd frontend
          npm run build
      
      - name: Upload frontend build
        uses: actions/upload-artifact@v3
        with:
          name: frontend-dist
          path: frontend/dist/

  test-cli:
    name: Test CLI
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          cd cli
          npm ci
      
      - name: Test CLI commands
        run: |
          cd cli
          node cli.js --version
          node cli.js --help

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, test-cli]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install GoTTY
        run: |
          wget https://github.com/yudai/gotty/releases/download/v1.0.1/gotty_linux_amd64.tar.gz
          tar -xzf gotty_linux_amd64.tar.gz
          sudo mv gotty /usr/local/bin/
          sudo chmod +x /usr/local/bin/gotty
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run integration tests
        run: |
          chmod +x test-integration.sh
          ./test-integration.sh
        env:
          NODE_ENV: test

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [lint, test-backend, test-frontend]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: web-terminal:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Test Docker image
        run: |
          docker run -d --name test-container -p 3000:3000 web-terminal:test
          sleep 10
          curl -f http://localhost:3000/api/health || exit 1
          docker stop test-container

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run npm audit
        run: |
          npm audit --audit-level=moderate || true
          cd backend && npm audit --audit-level=moderate || true
          cd ../frontend && npm audit --audit-level=moderate || true

  build-binaries:
    name: Build Binaries
    runs-on: ${{ matrix.os }}
    needs: [integration-test]
    
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
          - os: ubuntu-latest
            platform: linux
            arch: arm64
          - os: macos-latest
            platform: macos
            arch: x64
          - os: macos-latest
            platform: macos
            arch: arm64
          - os: windows-latest
            platform: windows
            arch: x64
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build binary
        run: |
          npm run build:binaries -- --target node18-${{ matrix.platform }}-${{ matrix.arch }}
      
      - name: Upload binary
        uses: actions/upload-artifact@v3
        with:
          name: binary-${{ matrix.platform }}-${{ matrix.arch }}
          path: dist/web-terminal-${{ matrix.platform }}-${{ matrix.arch }}*

  create-release-draft:
    name: Create Release Draft
    runs-on: ubuntu-latest
    needs: [build-binaries, docker-build, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: dist/
      
      - name: Create Release Draft
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          generate_release_notes: true
          files: |
            dist/**/*
            LICENSE
            README.md
            CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}