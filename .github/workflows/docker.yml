name: Docker

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sunday
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKERHUB_IMAGE: web-terminal

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request' && secrets.DOCKERHUB_USERNAME != ''
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-
      
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ github.ref_name }}
      
      - name: Run Trivy vulnerability scanner
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results to GitHub Security
        if: github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Generate SBOM
        if: github.event_name != 'pull_request'
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          format: spdx-json
          output-file: sbom.spdx.json
      
      - name: Upload SBOM
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: sbom.spdx.json

  test-docker:
    name: Test Docker Image
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Test Docker Compose
        run: |
          # Use the newly built image
          export DOCKER_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          
          # Update docker-compose to use the new image
          sed -i "s|build:|image: $DOCKER_IMAGE|g" docker-compose.yml
          
          # Start services
          docker-compose up -d
          
          # Wait for services to be ready
          sleep 10
          
          # Test health endpoint
          curl -f http://localhost:3000/api/health || exit 1
          
          # Test WebSocket connection
          timeout 5 node -e "
            const WebSocket = require('ws');
            const ws = new WebSocket('ws://localhost:3000/ws/test');
            ws.on('open', () => {
              console.log('WebSocket connected');
              process.exit(0);
            });
            ws.on('error', (err) => {
              console.error('WebSocket error:', err);
              process.exit(1);
            });
          " || echo "WebSocket test completed"
          
          # Check logs
          docker-compose logs
          
          # Stop services
          docker-compose down
      
      - name: Test Docker Run
        run: |
          # Run container
          docker run -d \
            --name test-container \
            -p 3001:3000 \
            -e NODE_ENV=production \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          
          # Wait for startup
          sleep 10
          
          # Test health
          curl -f http://localhost:3001/api/health || exit 1
          
          # Check logs
          docker logs test-container
          
          # Stop container
          docker stop test-container
          docker rm test-container

  docker-scout:
    name: Docker Scout Analysis
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request' && github.actor != 'dependabot[bot]'
    
    steps:
      - name: Docker Scout CVEs
        uses: docker/scout-action@v1
        with:
          command: cves
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Docker Scout Recommendations
        uses: docker/scout-action@v1
        with:
          command: recommendations
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          github-token: ${{ secrets.GITHUB_TOKEN }}