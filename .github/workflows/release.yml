name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm test
      
      - name: Build frontend
        run: |
          cd frontend
          npm ci
          npm run build
      
      - name: Upload frontend build
        uses: actions/upload-artifact@v3
        with:
          name: frontend-dist
          path: frontend/dist/

  build-binaries:
    name: Build ${{ matrix.platform }}-${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    needs: build-and-test
    
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
            node_arch: x64
          - os: ubuntu-latest
            platform: linux
            arch: arm64
            node_arch: arm64
          - os: macos-latest
            platform: darwin
            arch: x64
            node_arch: x64
          - os: macos-latest
            platform: darwin
            arch: arm64
            node_arch: arm64
          - os: windows-latest
            platform: win
            arch: x64
            node_arch: x64
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          architecture: ${{ matrix.node_arch }}
          cache: 'npm'
      
      - name: Download frontend build
        uses: actions/download-artifact@v3
        with:
          name: frontend-dist
          path: backend/static
      
      - name: Install dependencies
        run: |
          npm ci --production
          cd backend && npm ci --production
      
      - name: Install pkg
        run: npm install -g pkg
      
      - name: Build binary
        run: |
          pkg backend/server.js \
            --target node18-${{ matrix.platform }}-${{ matrix.arch }} \
            --output dist/web-terminal-${{ matrix.platform }}-${{ matrix.arch }} \
            --compress GZip
      
      - name: Create archive (Unix)
        if: matrix.platform != 'win'
        run: |
          cd dist
          tar -czf web-terminal-${{ matrix.platform }}-${{ matrix.arch }}.tar.gz \
            web-terminal-${{ matrix.platform }}-${{ matrix.arch }}
          rm web-terminal-${{ matrix.platform }}-${{ matrix.arch }}
      
      - name: Create archive (Windows)
        if: matrix.platform == 'win'
        run: |
          cd dist
          7z a -tzip web-terminal-${{ matrix.platform }}-${{ matrix.arch }}.zip `
            web-terminal-${{ matrix.platform }}-${{ matrix.arch }}.exe
          del web-terminal-${{ matrix.platform }}-${{ matrix.arch }}.exe
      
      - name: Generate checksum
        run: |
          cd dist
          if [[ "${{ matrix.platform }}" == "win" ]]; then
            certutil -hashfile web-terminal-${{ matrix.platform }}-${{ matrix.arch }}.zip SHA256 > checksum.txt
          else
            shasum -a 256 web-terminal-${{ matrix.platform }}-${{ matrix.arch }}.tar.gz > checksum.txt
          fi
        shell: bash
      
      - name: Upload binary archive
        uses: actions/upload-artifact@v3
        with:
          name: binary-${{ matrix.platform }}-${{ matrix.arch }}
          path: |
            dist/*.tar.gz
            dist/*.zip
            dist/checksum.txt

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build-and-test
    permissions:
      contents: read
      packages: write
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-binaries, build-docker]
    permissions:
      contents: write
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts/
      
      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          
          # Copy all binary archives
          find artifacts -name "*.tar.gz" -o -name "*.zip" | while read f; do
            cp "$f" release-assets/
          done
          
          # Combine checksums
          find artifacts -name "checksum.txt" | while read f; do
            cat "$f" >> release-assets/checksums.txt
          done
          
          # Copy additional files
          cp LICENSE release-assets/
          cp README.md release-assets/
          cp CHANGELOG.md release-assets/
          cp .env.example release-assets/
          
          # Create install scripts archive
          tar -czf release-assets/install-scripts.tar.gz install.sh install.ps1
          
          # List all assets
          ls -la release-assets/
      
      - name: Extract release notes
        id: release_notes
        run: |
          VERSION="${GITHUB_REF#refs/tags/}"
          if [ -z "$VERSION" ]; then
            VERSION="${{ github.event.inputs.version }}"
          fi
          
          # Extract release notes from CHANGELOG.md
          NOTES=$(awk "/## \[${VERSION#v}\]/{flag=1; next} /## \[/{flag=0} flag" CHANGELOG.md)
          
          if [ -z "$NOTES" ]; then
            NOTES="Release $VERSION\n\nSee [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details."
          fi
          
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: ${{ contains(github.ref, '-beta') || contains(github.ref, '-alpha') }}
          generate_release_notes: true
          body: |
            ${{ steps.release_notes.outputs.notes }}
            
            ## Installation
            
            ### Quick Install (Unix/Linux/macOS)
            ```bash
            curl -fsSL https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/install.sh | bash
            ```
            
            ### Docker
            ```bash
            docker pull ghcr.io/${{ github.repository }}:${{ github.ref_name }}
            ```
            
            ### Manual Download
            Download the appropriate binary for your platform from the assets below.
            
            ## Docker Images
            - `ghcr.io/${{ github.repository }}:${{ github.ref_name }}`
            - `ghcr.io/${{ github.repository }}:latest`
            
            ## Checksums
            SHA256 checksums are available in `checksums.txt`
          files: |
            release-assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-homebrew:
    name: Update Homebrew Formula
    runs-on: ubuntu-latest
    needs: create-release
    if: ${{ !contains(github.ref, '-beta') && !contains(github.ref, '-alpha') }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Update Homebrew formula
        run: |
          # This would typically update a homebrew tap repository
          echo "Homebrew formula update would go here"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}